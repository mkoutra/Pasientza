I'm trying to save some of the stuff I've learned while doing this.

- Multiple Windows with Tkinter (tk.TopLevel())
 - https://stackoverflow.com/questions/43552320/can-i-open-two-tkinter-windows-at-the-same-time
 - https://www.geeksforgeeks.org/python-tkinter-toplevel-widget/
 - https://www.pythontutorial.net/tkinter/tkinter-toplevel/
 - Note: (1) There can be only one root window, and one root.mainloop().
        (2) If you close the root, you close them all.

- __repr__() vs __str__()
  - Python uses the __repr__ method to determine what to
    put in the spot in the list.

- Shallow vs Deep copy:
  - https://thepythoncodingbook.com/2022/08/10/shallow-and-deep-copy-in-python/
  
  - https://note.nkmk.me/en/python-copy-deepcopy/
  
  - https://www.oreilly.com/library/view/python-in-a/0596001886/re123.html
  
  - From ChatGpt:
    "Here's a general guideline:

    If your class has no nested objects or references to other objects, and you only need shallow copying, you can define only __copy__.

    If your class has nested objects and you want to support both shallow and deep copying, define both __copy__ and __deepcopy__. If __deepcopy__ is not present, copy will fall back to using __copy__ for shallow copies.

    If your class has complex internal structures and you want to control the copying behavior in detail, define both methods to provide explicit copying logic for both shallow and deep scenarios.

    Remember to consider the specific needs and structure of your class when deciding which methods to implement."
  
  - Also from ChatGpt:
    Q: If a __deepcopy__ does not exist will the copy.deepcopy()  call the __copy__ ?
    Answer:

    Yes, if __deepcopy__ is not defined for a class, the copy.deepcopy() function will fall back to using the __copy__ method if it is present.

    Here's the order of priority that deepcopy follows:
      - If the class has a __deepcopy__ method, it will be used to create the deep copy.
      - If there's no __deepcopy__ method, but there is a __copy__ method, __copy__ will be used for a shallow copy, and the process will continue recursively for nested objects.
      - If neither __deepcopy__ nor __copy__ is defined, deepcopy will use other methods, such as __reduce__, to achieve copying.

    So, if you have a __deepcopy__ method, that will take precedence. If it's not present, but a __copy__ method is, it will be used for creating the deep copy.

    In your Card class, if you have both __deepcopy__ and __copy__ methods, deepcopy will preferentially use the __deepcopy__ method. If it's not present, it will use the __copy__ method for creating a shallow copy during the deep copy process.

- About any() built-in function: https://www.w3schools.com/python/ref_func_any.asp

- Naming Conventions in python:
  - https://peps.python.org/pep-0008/
  - https://visualgit.readthedocs.io/en/latest/pages/naming_convention.html

- Path files in python
  - https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f

- Canvas widget in tkinter
  - https://www.geeksforgeeks.org/python-tkinter-canvas-widget/

- Geometry manangers in tkinter (Sticky used in grid)
  https://www.studytonight.com/tkinter/python-tkinter-geometry-manager

- Button commands with arguments using lambda function
  https://stackoverflow.com/questions/58528462/tkinter-create-multiple-buttons-in-a-loop-and-change-text-of-clicked-ones

- Memory leaks - del - .clear() method in lists
  - https://realpython.com/python-del-statement/
  - https://docs.python.org/3/tutorial/datastructures.html
  - https://stackoverflow.com/questions/21514631/how-to-delete-an-instantiated-object-python

https://tkinter-docs.readthedocs.io/en/latest/widgets/canvas.html

- Pylint
  https://pythonspeed.com/articles/pylint/


- Clear Canvas
  https://www.tutorialspoint.com/how-to-clear-tkinter-canvas

- state of Widgets in tkinter
  https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/create_image.html

- imports - relative imports etc
- https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time